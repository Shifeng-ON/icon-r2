---
stages:
- name: Init Check
  inputs:
  - service: ${INIT_REPO}
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: stage
    enabled: false
  jobs:
  - name: Check
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
       # get bluegreen script
      if true
      then
       echo 'Pretest passed'
      fi
- name: Setup scripts
  inputs:
  - service: ${INIT_REPO}
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Create Elastic search service
    type: deployer
    fail_stage: false
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME1}
    script: |
      #!/bin/sh
      echo "Creating Elasticsearch for first deployment"
      export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
      npm i child_process

      node scripts/one-time-setup.js compose-elasticsearch-dedicated icon-elasticsearch Credential1
  - name: Create PostgreSQL service
    type: deployer
    fail_stage: false
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME1}
    script: |
      #!/bin/sh
      echo "Creating postgresql service for deployment code ${JOB_NAME:0:3}"
      export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
      npm i child_process

      node scripts/one-time-setup.js compose-postgresql-dedicated icon-postgresql-${JOB_NAME:0:3} Credential1
  - name: Create Rabbit-MQ service
    type: deployer
    fail_stage: false
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME1}
    script: |
      #!/bin/sh
      echo "Creating rabbitmq service for deployment code ${JOB_NAME:0:3}"
      export PATH=/opt/IBM/node-v6.7.0/bin:$PATH
      npm i child_process
      # please add the api call for setting size for postgresql
      node scripts/one-time-setup.js compose-rabbitmq-dedicated icon-rabbitmq-${JOB_NAME:0:3} Credential1
- name: Deploy PSQL
  inputs:
  - service: ${INIT_REPO}
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: populate_psql
    script: |-
      #!/bin/bash
      echo "Initialization postgresql lookup data"
      PATH=$(pwd)/pgsql/bin:$PATH

      ./scripts/exec_psql.sh icon-postgresql-${JOB_NAME:0:3} Credential1
- name: Build dhir nginx
  inputs:
  - service: ${DHIR_NGINX_REPO}
    type: git
    branch: ${BACKEND_ENV}
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ROLL_BACK
    type: text_area
    value: ${ROLL_BACK}
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
       # get bluegreen script
      echo "$ROLL_BACK" > deploy.sh
- name: Deploy dhir nginx
  inputs:
  - type: job
    stage: Build dhir nginx
    job: Build
    dir_name: null
  properties:
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  - name: DHIR_NGINX_MEM
    type: text
    value: ${DHIR_NGINX_MEM}
  - name: DHIR_NGINX_COUNT
    type: text
    value: ${DHIR_NGINX_COUNT}
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${DHIR_NGINX_NAME}
    script: |-
      #!/bin/bash
      # setup deploy function
      deploy(){
        cf push ${CF_APP}-new -n ${CF_APP}-${JOB_NAME:0:3} -d ${ICON_DOMAIN} -f bluemix/base-manifest.yml  --no-start
        cf scale -f -i ${DHIR_NGINX_COUNT} -m ${DHIR_NGINX_MEM} ${CF_APP}-new
      }
      export -f deploy
      # run the deployment
      chmod +x deploy.sh
      ./deploy.sh
- name: Build CLAMAV
  inputs:
  - service: ${CLAMAV_REPO}
    type: git
    branch: master
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ROLL_BACK
    type: text_area
    value: ${ROLL_BACK}
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
       # get bluegreen script
      echo "$ROLL_BACK" > deploy.sh
- name: Deploy CLAMAV
  inputs:
  - type: job
    stage: Build CLAMAV
    job: Build
    dir_name: null
  properties:
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  - name: CLAMAV_MEM
    type: text
    value: ${CLAMAV_MEM}
  - name: CLAMAV_COUNT
    type: text
    value: ${CLAMAV_COUNT}
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CLAMAV_NAME}
    script: |-
      #!/bin/bash
      # deployment script
      deploy(){
        cf push ${CF_APP}-new -n ${CF_APP}-${JOB_NAME:0:3} -d ${ICON_DOMAIN} -f bluemix/base-manifest.yml --no-start
        cf scale -f -i ${CLAMAV_COUNT} -m ${CLAMAV_MEM} ${CF_APP}-new
      }
      export -f deploy

      # get bluegreen script, which makes use of deploy
      chmod +x deploy.sh
      ./deploy.sh
- name: Build server and worker
  inputs:
  - service: ${SERVER_REPO}
    type: git
    branch: ${VERSION}
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: GET_CERT
    type: text_area
    value: ${GET_CERT}
  - name: ROLL_BACK
    type: text_area
    value: ${ROLL_BACK}
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
      echo "$GET_CERT" > getcert.sh
       # get bluegreen script
      echo "$ROLL_BACK" > deploy.sh
- name: Deploy server
  inputs:
  - type: job
    stage: Build server and worker
    job: Build
    dir_name: null
  properties:
  - name: CRYPTO_PASSWORD
    type: secure
    value: ${CRYPTO_PASSWORD}
  - name: JWT_TOKEN_SECRET_KEY
    type: secure
    value: ${JWT_TOKEN_SECRET_KEY}
  - name: PHIX_ENDPOINT_DICTIONARY
    type: text
    value: ${PHIX_ENDPOINT_DICTIONARY}
  - name: PHIX_ENDPOINT_RETRIEVAL
    type: text
    value: ${PHIX_ENDPOINT_RETRIEVAL}
  - name: PHIX_ENDPOINT_RETRIEVAL_TOKEN
    type: secure
    value: ${PHIX_ENDPOINT_RETRIEVAL_TOKEN}
  - name: PHIX_ENDPOINT_SUBMISSION
    type: text
    value: ${PHIX_ENDPOINT_SUBMISSION}
  - name: PHIX_ENDPOINT_SUBMISSION_TOKEN
    type: secure
    value: ${PHIX_ENDPOINT_SUBMISSION_TOKEN}
  - name: PHIX_ENDPOINT_PIN_ADMIN
    type: text
    value: ${PHIX_ENDPOINT_PIN_ADMIN}
  - name: PHIX_ENDPOINT_PIN_ADMIN_TOKEN
    type: secure
    value: ${PHIX_ENDPOINT_PIN_ADMIN_TOKEN}
  - name: POSTGRES_READONLY_ROLE
    type: text
    value: ${POSTGRES_READONLY_ROLE}
  - name: TZ
    type: text
    value: ${TZ}
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  - name: BACKEND_MEM
    type: text
    value: ${BACKEND_MEM}
  - name: BACKEND_COUNT
    type: text
    value: ${BACKEND_COUNT}
  - name: BACKEND_WORKER_MEM
    type: text
    value: ${BACKEND_WORKER_MEM}
  - name: BACKEND_WORKER_COUNT
    type: text
    value: ${BACKEND_WORKER_COUNT}
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  jobs:
  - name: Deploy server
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${SERVER_NAME}
    script: |-
      #!/bin/bash
      # getting credential of elasticsearch
      deploy(){
        source getcert.sh
        getcert
        cf push ${CF_APP}-new -d ${ICON_DOMAIN} -n ${CF_APP}-${JOB_NAME:0:3} -f bluemix/base-main-manifest.yml --no-start
        # Prepare configuration\
        # GET CLAMAV endpoint
        CLAMAV_ENDPOINT=https://${CLAMAV_NAME}-${JOB_NAME:0:3}.${ICON_DOMAIN}/scan
        # GET DHIR NGINX ENDPOINT
        DHIR_NGINX_ENDPOINT=https://${DHIR_NAME}-${JOB_NAME:0:3}.${ICON_DOMAIN}
        #Setting env for server
        cf set-env ${SERVER_NAME}-new CLAMAV_ENDPOINT $CLAMAV_ENDPOINT
        cf set-env ${SERVER_NAME}-new JWT_TOKEN_SECRET_KEY  $JWT_TOKEN_SECRET_KEY
        cf set-env ${SERVER_NAME}-new CRYPTO_PASSWORD $CRYPTO_PASSWORD
        cf set-env ${SERVER_NAME}-new PHIX_ENDPOINT_DICTIONARY ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_DICTIONARY}
        cf set-env ${SERVER_NAME}-new PHIX_ENDPOINT_RETRIEVAL ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_RETRIEVAL}
        cf set-env ${SERVER_NAME}-new PHIX_ENDPOINT_SUBMISSION ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_SUBMISSION}
        cf set-env ${SERVER_NAME}-new PHIX_ENDPOINT_RETRIEVAL_TOKEN ${PHIX_ENDPOINT_RETRIEVAL_TOKEN}
        cf set-env ${SERVER_NAME}-new PHIX_ENDPOINT_SUBMISSION_TOKEN ${PHIX_ENDPOINT_SUBMISSION_TOKEN}
        cf set-env ${SERVER_NAME}-new POSTGRES_READONLY_ROLE ${POSTGRES_READONLY_ROLE}
        cf set-env ${SERVER_NAME}-new TZ ${TZ}
        cf set-env ${SERVER_NAME}-new SERVER_TYPE 1
        cf set-env ${SERVER_NAME}-new POSTGRESQL_NAME icon-postgresql-${JOB_NAME:0:3}
        cf set-env ${SERVER_NAME}-new RABBITMQ_NAME icon-rabbitmq-${JOB_NAME:0:3}
        cf bs ${SERVER_NAME}-new icon-postgresql-${JOB_NAME:0:3}
        cf bs ${SERVER_NAME}-new icon-rabbitmq-${JOB_NAME:0:3}
        if [ -f cert.pem ]
        then
          cf set-env ${SERVER_NAME}-new NODE_EXTRA_CA_CERTS cert.pem
        fi      
        cf set-env ${SERVER_NAME}-new DHIR_ENDPOINT_ACCESS ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_PIN_ADMIN}
        cf set-env ${SERVER_NAME}-new DHIR_ENDPOINT_ACCESS_TOKEN ${PHIX_ENDPOINT_PIN_ADMIN_TOKEN}
        cf scale -f -i ${BACKEND_COUNT} -m ${BACKEND_MEM}  ${SERVER_NAME}-new
      }
      
      export -f deploy
      # run the deployment
      chmod +x deploy.sh
      ./deploy.sh
  - name: Deploy worker
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${WORKER_NAME}
    script: |-
      #!/bin/bash
      # getting credential of elasticsearch
      deploy(){
        source getcert.sh
        getcert
        cf push ${CF_APP}-new -f bluemix/base-worker-manifest.yml  --no-start
        # GET CLAMAV endpoint
        CLAMAV_ENDPOINT=https://${CLAMAV_NAME}-${JOB_NAME:0:3}.${ICON_DOMAIN}/scan
        # GET DHIR NGINX ENDPOINT
        DHIR_NGINX_ENDPOINT=https://${DHIR_NAME}-${JOB_NAME:0:3}.${ICON_DOMAIN}
        # Setting env for server worker
        cf set-env ${WORKER_NAME}-new CLAMAV_ENDPOINT $CLAMAV_ENDPOINT
        cf set-env ${WORKER_NAME}-new JWT_TOKEN_SECRET_KEY  $JWT_TOKEN_SECRET_KEY
        cf set-env ${WORKER_NAME}-new CRYPTO_PASSWORD $CRYPTO_PASSWORD
        cf set-env ${WORKER_NAME}-new PHIX_ENDPOINT_DICTIONARY ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_DICTIONARY}
        cf set-env ${WORKER_NAME}-new PHIX_ENDPOINT_RETRIEVAL ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_RETRIEVAL}
        cf set-env ${WORKER_NAME}-new PHIX_ENDPOINT_SUBMISSION ${DHIR_NGINX_ENDPOINT}${PHIX_ENDPOINT_SUBMISSION}
        cf set-env ${WORKER_NAME}-new PHIX_ENDPOINT_RETRIEVAL_TOKEN ${PHIX_ENDPOINT_RETRIEVAL_TOKEN}
        cf set-env ${WORKER_NAME}-new PHIX_ENDPOINT_SUBMISSION_TOKEN ${PHIX_ENDPOINT_SUBMISSION_TOKEN}
        cf set-env ${WORKER_NAME}-new POSTGRES_READONLY_ROLE ${POSTGRES_READONLY_ROLE}
        cf set-env ${WORKER_NAME}-new TZ ${TZ}
        cf set-env ${WORKER_NAME}-new SERVER_TYPE 2
        cf set-env ${WORKER_NAME}-new POSTGRESQL_NAME icon-postgresql-${JOB_NAME:0:3}
        cf set-env ${WORKER_NAME}-new RABBITMQ_NAME icon-rabbitmq-${JOB_NAME:0:3}
        cf bs ${WORKER_NAME}-new icon-postgresql-${JOB_NAME:0:3}
        cf bs ${WORKER_NAME}-new icon-rabbitmq-${JOB_NAME:0:3}
        if [ -f cert.pem ]
        then
          cf set-env ${WORKER_NAME}-new NODE_EXTRA_CA_CERTS cert.pem
        fi
        cf scale -f -i ${BACKEND_WORKER_COUNT} -m ${BACKEND_WORKER_MEM} ${WORKER_NAME}-new
      }
      export -f deploy
      # run the deployment
      chmod +x deploy.sh
      ./deploy.sh
- name: Build ICONR2 UI
  inputs:
  - service: ${FRONTEND_REPO}
    type: git
    branch: ${VERSION}
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ROLL_BACK
    type: text_area
    value: ${ROLL_BACK}
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |
      #!/bin/bash
       # get bluegreen script
      echo "$ROLL_BACK" > deploy.sh
- name: Deploy ICONR2 UI
  inputs:
  - type: job
    stage: Build ICONR2 UI
    job: Build
    dir_name: null
  properties:
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  - name: FRONTEND_MEM
    type: text
    value: ${FRONTEND_MEM}
  - name: FRONTEND_COUNT
    type: text
    value: ${FRONTEND_COUNT}
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${FRONTEND_NAME}
    script: |-
      #!/bin/bash    
      deploy(){
        cf push ${CF_APP}-new -n xxsupportphu1 -d ${ICON_DOMAIN} -f bluemix/base-manifest.yml --no-start
          
        cf set-env ${CF_APP}-new ICON_SERVER https://${SERVER_NAME}-${JOB_NAME:0:3}.${ICON_DOMAIN}
      
        cf scale -f -i ${FRONTEND_COUNT} -m ${FRONTEND_MEM} ${CF_APP}-new
      }
      export -f deploy

      # run the deployment
      chmod +x deploy.sh
      ./deploy.sh
- name: Post Check
  inputs:
  - type: job
    stage: Init Check
    job: Check
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  - name: ROLL_BACK
    value: ${ROLL_BACK}
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      # setup deploy function
      if true
      then
        echo 'Post deployment test passed'
      else
        echo 'Post deployment test failed, deleting all deployed components'
        echo '$ROLL_BACK' > rollback.sh
        chmod +x rollback.sh
        ./rollback.sh
      fi
- name: Blue-Green Switch
  inputs:
  - type: job
    stage: Build ICONR2 UI
    job: Build
    dir_name: null
  properties:
  - name: PHU_SELECT
    type: text
    value: ${PHU_SELECT}
  - name: FRONT_END_DOMAIN
    type: text
    value: ${FRONT_END_DOMAIN}
  - name: CUSTOM_PHU
    type: text
    value: ${CUSTOM_PHU}
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  - name: ICON_DOMAIN
    type: text
    value: ${ICON_DOMAIN}
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${FRONTEND_NAME}
    script: |-
      #!/bin/bash    
      deploy(){
        PHUs=
        if [ -z ${PHU_SELECT} ]
        then
          PHUs=${CUSTOM_PHU}
        else
          if [ ${PHU_SELECT} = "Full" ]
          then
            PHUs='xxsupportphu1,aph,bchu,ckphu,drhd,eohu,esthu,gbhu,hnhu,hkpr,hrhd,hph,hpechu,hchu,kfla,lph,lgl,mlhu,nrph,nbpsdhu,nwhu,oph,ocph,peel,pdhu,pcchu,po,rowph,re,smdhu,sdhu,tbdhu,timhu,tph,wdgph,wechu,yrphu' 
          else
            PHUs=${CUSTOM_PHU}
          fi
        fi

        for i in $(echo $PHUs | tr ',' ' ')
        do
          cf map-route ${CF_APP}-new ${FRONT_END_DOMAIN} --hostname $i
        done

        cf unmap-route ${CF_APP}-new ${ICON_DOMAIN} --hostname xxsupportphu1
        cf delete-route -f ${ICON_DOMAIN} --hostname xxsupportphu1
      }
      export -f deploy

      # run the deployment
      chmod +x deploy.sh
      ./deploy.sh
- name: Clean up
  inputs:
  - type: job
    stage: Init Check
    job: Check
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: DHIR_NAME
    value: ${DHIR_NAME}
    type: text
  - name: CLAMAV_NAME
    value: ${CLAMAV_NAME}
    type: text
  - name: SERVER_NAME
    value: ${SERVER_NAME}
    type: text
  - name: WORKER_NAME
    value: ${WORKER_NAME}
    type: text
  - name: FRONTEND_NAME
    value: ${FRONTEND_NAME}
    type: text
  jobs:
  - name: Deploy
    type: deployer
    fail_stage: false
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
    script: |-
      #!/bin/bash
      echo "Running final cleaning up script, this might take long"
      set +e 
      # get psql name
    
      OLD_PSQL=$(cf env ${SERVER_NAME} | sed -n '/compose-postgresql-dedicated/,/\]/ p'  | grep 'name' | cut -d ':' -f 2 | tr -d '," ')
      
      # get rbmq name
      OLD_RBMQ=$(cf env ${SERVER_NAME} | sed -n '/compose-rabbitmq-dedicated/,/\]/ p'  | grep 'name' | cut -d ':' -f 2 | tr -d '," ')
      
      # rename current to old
      cf rename ${DHIR_NAME} ${DHIR_NAME}-old
      cf rename ${SERVER_NAME} ${SERVER_NAME}-old
      cf rename ${WORKER_NAME} ${WORKER_NAME}-old
      cf rename ${CLAMAV_NAME} ${CLAMAV_NAME}-old
      cf rename ${FRONTEND_NAME} ${FRONTEND_NAME}-old

      # prevent access to old version of ICONR2 from user
      cf stop ${FRONTEND_NAME}-old

      # require script to check if there are any more jobs to be process in the rabbit mq & postgresql

      # rename new to current
      cf rename ${DHIR_NAME}-new ${DHIR_NAME}
      cf rename ${SERVER_NAME}-new ${SERVER_NAME}
      cf rename ${WORKER_NAME}-new ${WORKER_NAME}
      cf rename ${CLAMAV_NAME}-new ${CLAMAV_NAME}
      cf rename ${FRONTEND_NAME}-new ${FRONTEND_NAME}
      
      # final clean up below
      # delete the old  app
      cf delete -f ${DHIR_NAME}-old
      cf delete -f ${SERVER_NAME}-old
      cf delete -f ${WORKER_NAME}-old
      cf delete -f ${CLAMAV_NAME}-old
      cf delete -f ${FRONTEND_NAME}-old

      # delete the old services
      cf dsk -f $OLD_PSQL Credential1
      cf dsk -f $OLD_RBMQ Credential1
      cf ds -f $OLD_PSQL
      cf ds -f $OLD_RBMQ
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
